[project]
name = "venv-prefect-mariadb-deepchecks"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12.10"
dependencies = [
    "feature-engine>=1.8.3",
    "prefect>=3.4.1",
    "pyarrow>=20.0.0",
    "pymysql>=1.1.1",
    "python-dotenv>=1.1.0",
]

[dependency-groups]
dev = [
    "anywidget>=0.9.18",
    "deepchecks>=0.19.1",
    "dvc>=3.59.2",
    "jupyter>=1.1.1",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pydocstyle>=6.3.0",
    "pytest>=8.3.5",
    "pyupgrade>=3.20.0",
    "ruff>=0.11.10",
]

[tool.ruff]
line-length = 88         # Longitud máxima de línea (como Black)
target-version = "py312" # Versión de Python objetivo
exclude = [  
    "*.ipynb",
    ".venv/",
    "scripts/",
    "terraform/",
    "migrations/",
    "build/",
    "dist/",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "C4",  # flake8-comprehensions (útil para data science)
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib (recomendado para proyectos modernos)
    "PD",  # pandas-vet (específico para data science)
    "NPY", # NumPy-specific rules
]
ignore = [
    "E501",   # Ignora longitud de línea
    "D203",   # Ignora blank line before class (incompatible con D211)
    "D212",   # Ignora summary in first line (incompatible con D213)
    "D413",
    "D104"
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # Imports no usados y docstrings en __init__
"tests/*" = ["D", "S101"]         # Docstrings y asserts en tests
"scripts/*" = ["D", "T201"]       # Docstrings y prints en scripts
"conftest.py" = ["D"]             # Docstrings en conftest

[tool.ruff.format]
quote-style = "single"   # Usa comillas simples en el formateo (opcional)

[tool.pydocstyle]
convention = "google"
add-ignore = ["D212", "D203", "D413", "D104"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
show_error_codes = true

exclude = [
    "*.ipynb",
    "tests/",          # Ignora tests si no tienen anotaciones de tipo
    "scripts/",        # Ignora scripts auxiliares
    "**/__init__.py",  # Opcional: ignora docstrings en __init__
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = true
ignore_errors = true

[tool.bandit]
exclude_dirs = [".venv", ".git", "tests", "__pycache__", "scripts", ".pytest_cache"]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls (común en notebooks)
    "B602",  # subprocess_popen_with_shell_equals_true
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
